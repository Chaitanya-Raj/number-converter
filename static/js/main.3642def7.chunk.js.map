{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","bin","setBin","dec","setDec","oct","setOct","hex","setHex","convert","value","n","isNaN","parseInt","match","console","log","toString","className","htmlFor","type","name","id","onChange","e","target","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oQA8GeA,MA3Gf,WAAgB,IAAD,EACSC,mBAAS,IADlB,mBACNC,EADM,KACDC,EADC,OAESF,mBAAS,IAFlB,mBAENG,EAFM,KAEDC,EAFC,OAGSJ,mBAAS,IAHlB,mBAGNK,EAHM,KAGDC,EAHC,OAISN,mBAAS,IAJlB,mBAINO,EAJM,KAIDC,EAJC,KAMPC,EAAU,SAACC,EAAOC,GAElBC,MAAMC,SAASH,MAAWA,EAAMI,MAAM,gBAC9B,KAAVJ,GAgBAK,QAAQC,IAAI,MACF,IAANL,GACFT,EAAO,IAEC,IAANS,GACFL,EAAO,IAEC,KAANK,GACFP,EAAO,IAEC,KAANO,GACFH,EAAO,MAzBTO,QAAQC,IAAIN,GACF,IAANC,GACFT,EAAOW,SAASH,EAAOC,GAAGM,SAAS,IAE3B,IAANN,GACFL,EAAOO,SAASH,EAAOC,GAAGM,SAAS,IAE3B,KAANN,GACFP,EAAOS,SAASH,EAAOC,GAAGM,SAAS,KAE3B,KAANN,GACFH,EAAOK,SAASH,EAAOC,GAAGM,SAAS,OAmBzC,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,WACb,2BAAOC,QAAQ,OAAf,WACA,2BACEC,KAAK,OACLC,KAAK,MACLC,GAAG,MACHZ,MAAOP,EACPoB,SAAU,SAACC,GACLA,EAAEC,OAAOf,MAAMI,MAAM,cACvBV,EAAOoB,EAAEC,OAAOf,OAChBD,EAAQe,EAAEC,OAAOf,MAAO,SAKhC,yBAAKQ,UAAU,UACb,2BAAOC,QAAQ,OAAf,UACA,2BACEC,KAAK,OACLC,KAAK,MACLC,GAAG,MACHZ,MAAOT,EACPsB,SAAU,SAACC,GACLA,EAAEC,OAAOf,MAAMI,MAAM,cACvBZ,EAAOsB,EAAEC,OAAOf,OAChBD,EAAQe,EAAEC,OAAOf,MAAO,QAKhC,yBAAKQ,UAAU,SACb,2BAAOC,QAAQ,OAAf,SACA,2BACEC,KAAK,OACLC,KAAK,MACLC,GAAG,MACHZ,MAAOL,EACPkB,SAAU,SAACC,GACLA,EAAEC,OAAOf,MAAMI,MAAM,cACvBR,EAAOkB,EAAEC,OAAOf,OAChBD,EAAQe,EAAEC,OAAOf,MAAO,QAKhC,yBAAKQ,UAAU,eACb,2BAAOC,QAAQ,OAAf,eACA,2BACEC,KAAK,OACLC,KAAK,MACLC,GAAG,MACHZ,MAAOH,EACPgB,SAAU,SAACC,GACLA,EAAEC,OAAOf,MAAMI,MAAM,oBACvBN,EAAOgB,EAAEC,OAAOf,OAChBD,EAAQe,EAAEC,OAAOf,MAAO,WCzFlBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASf,MACvB,2DCZNgB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.3642def7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [bin, setBin] = useState(\"\");\r\n  const [dec, setDec] = useState(\"\");\r\n  const [oct, setOct] = useState(\"\");\r\n  const [hex, setHex] = useState(\"\");\r\n\r\n  const convert = (value, n) => {\r\n    if (\r\n      (!isNaN(parseInt(value)) || value.match(\"^[A-Fa-f]*$\")) &&\r\n      value !== \"\"\r\n    ) {\r\n      console.log(value);\r\n      if (n !== 2) {\r\n        setBin(parseInt(value, n).toString(2));\r\n      }\r\n      if (n !== 8) {\r\n        setOct(parseInt(value, n).toString(8));\r\n      }\r\n      if (n !== 10) {\r\n        setDec(parseInt(value, n).toString(10));\r\n      }\r\n      if (n !== 16) {\r\n        setHex(parseInt(value, n).toString(16));\r\n      }\r\n    } else {\r\n      console.log(\"no\");\r\n      if (n !== 2) {\r\n        setBin(\"\");\r\n      }\r\n      if (n !== 8) {\r\n        setOct(\"\");\r\n      }\r\n      if (n !== 10) {\r\n        setDec(\"\");\r\n      }\r\n      if (n !== 16) {\r\n        setHex(\"\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"decimal\">\r\n        <label htmlFor=\"dec\">Decimal</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"dec\"\r\n          id=\"dec\"\r\n          value={dec}\r\n          onChange={(e) => {\r\n            if (e.target.value.match(\"^[0-9]*$\")) {\r\n              setDec(e.target.value);\r\n              convert(e.target.value, 10);\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"binary\">\r\n        <label htmlFor=\"bin\">Binary</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"bin\"\r\n          id=\"bin\"\r\n          value={bin}\r\n          onChange={(e) => {\r\n            if (e.target.value.match(\"^[0-1]*$\")) {\r\n              setBin(e.target.value);\r\n              convert(e.target.value, 2);\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"octal\">\r\n        <label htmlFor=\"oct\">Octal</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"oct\"\r\n          id=\"oct\"\r\n          value={oct}\r\n          onChange={(e) => {\r\n            if (e.target.value.match(\"^[0-7]*$\")) {\r\n              setOct(e.target.value);\r\n              convert(e.target.value, 8);\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"hexadecimal\">\r\n        <label htmlFor=\"hex\">Hexadecimal</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"hex\"\r\n          id=\"hex\"\r\n          value={hex}\r\n          onChange={(e) => {\r\n            if (e.target.value.match(\"^[a-fA-F0-9]*$\")) {\r\n              setHex(e.target.value);\r\n              convert(e.target.value, 16);\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}